WEATHER POWERED EMAIL by Caitlin Matuszak

Running the app:
- Prerequistes: Java 8
    Note: there are problems with Java 9 and gradle. Please make sure you are using Java 8
- Follow the instructions here to download grails:
    For UNIX based systems:
        - using sdkman as detailed here is the simplest way:
            https://grails.org/download.html
    For Windows systems:
        - check out this more detailed getting started guide,
          specifically the manual installation sections:
            http://docs.grails.org/latest/guide/gettingStarted.html
- Navigate to the WeatherApp directory and run:
   ./grailsw run-app
- Wait until it says "Grails application running at http://localhost:8080", then navigate to localhost:8080
- Homepage will be the sign up page
- Email blast can be sent out by going to:
   localhost:8080/emailBlast

Framework details:
- I used Grails to implement this project
- Grails is a Groovy-based web application framework
- Contains integrated ORM support for the database portion
- MVC + Services design

Model:
- located in the domain folder
- one domain class: User
- this class creates one corresponding table in the database
- two columns:
    - email : must be unique and of valid email format
    - location : must be one of the locations defined in the list in the Signup Controller
- Note: the database is currently not persistent after you stop running the app. This was done for ease
  of setup, and the db can easily be changed to be a mysql database that would be persistent locally

Controllers:
- SignupController
    - contains the list of valid locations
    - one action: subscribe - creates a new user and adds to the db
- EmailBlastController
    - calls the EmailBlastService and does the work of sending the email to each user in the User table
- UserController
    - all methods generated by grails for reading/writing from the database

Services:
- EmailBlastService
    - contains the business logic for creating the emails to be sent
    - weather data is obtained from the Wunderground API
    - the actual sending of the emails is done by the grails mail plugin by calling the sendMail function
    - the emails are being sent using a dummy email I set up for this:
        weatherpoweredemailchallenge@gmail.com

Views:
- signup/index.gsp
    - route "/"
    - the default page for the app
    - contains a form for subscribing to the email blast
    - upon submitting the form, an appropriate success or error message will be shown
- emailblast/index.gsp
    - route "/emailBlast"
    - contains a button for sending out the email blast (convenience page)
    - will display a success/error message as appropriate

Things to think about:
Security:
- the email field is validated on both the frontend and at the database level
- the user is not able to enter any malicious characters such as ' or <
- accomplished by setting the type as email on both the frontend input field and the db column
- the email blast page is accessible to any user if they go to the url, but this was just a convenience page
  created and if it were to be developed into a real app, this page would be developed into some sort of admin portal
  with some authentication required

Re-usability:
- The business logic for creating and actually sending the emails has been pulled out into the EmailBlastService
- This would allow for things such as only sending the blast to a specific subset of users
- More things could have been pulled out into separate methods to make the code more re-usable, but for now, the main
  concern was maintaining the separation of interests between the controllers and the services

Re-inventing the wheel:
- Grails does a lot of the heavy lifting for me here
- Perhaps a bit heavier than necessary for this small project, but this enabled a quick and easy setup of the db
  with the integrated ORM and eliminated any integration work that would have otherwise been necessary to connect
  the frontend, backend, and db layers
- Grails also was useful in terms of libraries and plugins available - grails already had a mail plugin that I could
  use to easily send emails

Usability:
- There are many things that I would love to add to this app to make a better user experience if I had more time to
  spend on it
- The locations dropdown could be ordered better, or more easily searchable
- More descriptive error messages could be provided
- The user's name could be asked for to make the email greeting more personal
- Email blast is currently very easy to send out with the convenience page, but currently it is not very configurable
